files <- list.files(filedir, pattern = "_5Mb.txt", full.names = TRUE)
# Read in files and combine into data frame
filedir <- "/Users/derekwong/Desktop/H4H/projects/uveal_melanoma/fragmentomics/output/5Mb_files"
outdir <- "/Users/derekwong/OneDrive - UHN/Post-Doc/Uveal_Melanoma_Project/fragmentomics"
files <- list.files(filedir, pattern = "_5Mb.txt", full.names = TRUE)
metadata <- read.delim("/Users/derekwong/OneDrive - UHN/Post-Doc/Uveal_Melanoma_Project/fragmentomics/sample_list.txt")
metadata$TGL_ID <- sub('_WG', '', metadata$TGL_ID)
View(metadata)
metadata$depth <- metadata$coverage
metadata <- subset(metadata, select = -coverage)
bins.list <- lapply(files, read.delim)
files <- list.files(filedir, pattern = "_5Mb_bins.txt", full.names = TRUE)
bins.list <- lapply(files, read.delim)
tib.list <- lapply(bins.list, as_tibble)
df.fr <- tib.list %>%
bind_rows() %>% dplyr::select(everything())
df.fr$sample_id <- sub('_WG.*', '', df.fr$sample_id)
df.fr <- merge(x = df.fr, y = metadata, by.x = "sample_id", by.y = "TGL_ID", all = TRUE)
df.fr <- df.fr[!is.na(df.fr$seqnames), ]
coverage <- df.fr %>% ungroup() %>% group_by(sample_id) %>%
dplyr::summarize(hqbases_analyzed = 100*sum(nfrags)*2,
depth = hqbases_analyzed/(504*5e6)
)
metadata <- merge(x=metadata, y=coverage, by.x="TGL_ID", by.y="sample_id")
View(metadata)
View(df.fr)
df.fr <- merge(x = df.fr, y = metadata, by.x = "sample_id", by.y = "TGL_ID", all = TRUE)
df.fr <- tib.list %>%
bind_rows() %>% dplyr::select(everything())
df.fr$sample_id <- sub('_WG.*', '', df.fr$sample_id)
View(df.fr)
df.fr <- merge(x = df.fr, y = metadata, by.x = "sample_id", by.y = "TGL_ID", all = TRUE)
df.fr <- df.fr[!is.na(df.fr$seqnames), ]
coverage <- df.fr %>% ungroup() %>% group_by(sample_id) %>%
dplyr::summarize(hqbases_analyzed = 100*sum(nfrags)*2,
depth = hqbases_analyzed/(504*5e6)
)
View(df.fr)
View(coverage)
metadata <- merge(x=metadata, y=coverage, by.x="TGL_ID", by.y="sample_id")
# Create summary files
# Subset "healthy" samples
healthy <- metadata %>%
filter(opt_TF == 0,
depth > 0.5,
mutation != "Y",
sample_type == "plasma")
df.fr_healthy <- df.fr[df.fr$sample_id %in% healthy$TGL_ID, ]
row.names(df.fr)
colnames(df.fr)
# Generate median (can also use to generate a healthy median if available)
healthy_median <- df.fr %>%
group_by(bin) %>%
dplyr::summarize(sample_id = "median",
seqnames = unique(seqnames),
arm = unique(arm),
start = unique(start),
end = unique(end),
gc = unique(gc),
median_frag_gc = median(frag_gc, na.rm=TRUE),
median_short=median(short, na.rm=TRUE),
median_long=median(long, na.rm=TRUE),
median_nfrags=median(nfrags, na.rm=TRUE),
median_ratio=median(ratio, na.rm=TRUE),
median_short_corrected=median(short_corrected, na.rm=TRUE),
median_long_corrected=median(long_corrected, na.rm=TRUE),
median_nfrags_corrected=median(nfrags_corrected, na.rm=TRUE),
median_ratio_corrected=median(short_corrected/long_corrected, na.rm=TRUE),
median_ratio_centered=median(ratio_centered, na.rm=TRUE),
median_coverage=median(coverage, na.rm=TRUE),
median_coverage_corrected=median(coverage_corrected, na.rm=TRUE),
median_coverage_centered=median(coverage_centered, na.rm=TRUE),
median_combined=median(combined, na.rm=TRUE),
median_combined_centered(combined_centered, na.rm=TRUE),
median_short_var=median(short_var, na.rm=TRUE),
median_long_var=median(long_var, na.rm=TRUE),
median_nfrags_var=median(nfrags_var, na.rm=TRUE),
median_mode_size=median(mode_size, na.rm=TRUE),
median_mean_size=median(mean_size, na.rm=TRUE),
median_median_size=median(median_size, na.rm=TRUE),
median_q25_size=median(q25_size, na.rm=TRUE),
median_q75_size=median(q75_size, na.rm=TRUE))
# Generate median (can also use to generate a healthy median if available)
healthy_median <- df.fr %>%
group_by(bin) %>%
dplyr::summarize(sample_id = "median",
seqnames = unique(seqnames),
arm = unique(arm),
start = unique(start),
end = unique(end),
gc = unique(gc),
median_frag_gc = median(frag_gc, na.rm=TRUE),
median_short=median(short, na.rm=TRUE),
median_long=median(long, na.rm=TRUE),
median_nfrags=median(nfrags, na.rm=TRUE),
median_ratio=median(ratio, na.rm=TRUE),
median_short_corrected=median(short_corrected, na.rm=TRUE),
median_long_corrected=median(long_corrected, na.rm=TRUE),
median_nfrags_corrected=median(nfrags_corrected, na.rm=TRUE),
median_ratio_corrected=median(short_corrected/long_corrected, na.rm=TRUE),
median_ratio_centered=median(ratio_centered, na.rm=TRUE),
median_coverage=median(coverage, na.rm=TRUE),
median_coverage_corrected=median(coverage_corrected, na.rm=TRUE),
median_coverage_centered=median(coverage_centered, na.rm=TRUE),
median_combined=median(combined, na.rm=TRUE),
median_combined_centered=median(combined_centered, na.rm=TRUE),
median_short_var=median(short_var, na.rm=TRUE),
median_long_var=median(long_var, na.rm=TRUE),
median_nfrags_var=median(nfrags_var, na.rm=TRUE),
median_mode_size=median(mode_size, na.rm=TRUE),
median_mean_size=median(mean_size, na.rm=TRUE),
median_median_size=median(median_size, na.rm=TRUE),
median_q25_size=median(q25_size, na.rm=TRUE),
median_q75_size=median(q75_size, na.rm=TRUE))
View(healthy_median)
write.table(df.fr_healthy, file.path(outdir, paste0("healthy_median_UM.txt")))
setwd("~/Desktop/H4H/projects/CHARM/NF1/fragmentomics/output/5Mb_files")
# Read in files and combine into data frame
filedir <- "/Users/derekwong/Desktop/H4H/projects/CHARM/NF1/fragmentomics/output/5Mb_files"
files <- list.files(filedir, pattern = "_5Mb_bins.txt", full.names = TRUE)
bins.list <- lapply(files, read.delim)
tib.list <- lapply(bins.list, as_tibble)
df.fr <- tib.list %>%
bind_rows() %>% dplyr::select(everything())
df.fr$sample_id <- sub('_WG.*', '', df.fr$sample_id)
View(df.fr)
coverage <- df.fr %>% ungroup() %>% group_by(sample_id) %>%
dplyr::summarize(hqbases_analyzed = 100*sum(nfrags)*2,
depth = hqbases_analyzed/(504*5e6)
)
View(coverage)
df.fr <- tib.list %>%
bind_rows() %>% dplyr::select(everything())
View(df.fr)
coverage <- df.fr %>% ungroup() %>% group_by(sample_id) %>%
dplyr::summarize(hqbases_analyzed = 100*sum(nfrags)*2,
depth = hqbases_analyzed/(504*5e6)
)
outdir <- "/Users/derekwong/OneDrive - UHN/Post-Doc/CHARM_Project/NF1/fragmentomics"
write.table(coverage, file.path(outdir, paste0("fragmentomics_coverage.txt")))
outdir <- "/Users/derekwong/OneDrive - UHN/Post-Doc/CHARM_Project/NF1/cfWGS_fragmentomics"
write.table(coverage, file.path(outdir, paste0("fragmentomics_coverage.txt")))
colnames(df.fr_healthy)
View(healthy_median)
colnames(healthy_median)
# Generate correlations
summary_df <- df.fr %>% ungroup() %>% group_by(sample_id) %>%
dplyr::summarize(
ratio_cor=cor(ratio, healthy_median$median_ratio, method="pearson", use="complete.obs"),
ratio_corrected_cor=cor(ratio_corrected, healthy_median$median_ratio_corrected, method="pearson", use="complete.obs"),
ratio_centered_cor=cor(ratio_centered, healthy_median$median_ratio_centered, method="pearson", use="complete.obs"),
coverage_cor=cor(coverage, healthy_median$median_coverage, method="pearson", use="complete.obs"),
coverage_corrected_cor=cor(coverage_corrected, healthy_median$median_coverage_corrected, method="pearson", use="complete.obs"),
coverage_centered_cor=cor(coverage_centered, healthy_median$median_coverage_centered, method="pearson", use="complete.obs"),
combined_cor=cor(combined, healthy_median$median_combined, method="pearson", use="complete.obs"),
combined_centered_cor=(combined_centered, healthy_median$median_combined_centered, method="pearson", use="complete.obs"),
nfrags = sum(nfrags),
mode_size=unique(mode_size),
mean_size=unique(mean_size),
median_size=unique(median_size),
q25_size=unique(q25_size),
q75_size=unique(q75_size),
hqbases_analyzed = 100*sum(nfrags)*2,
coverage = hqbases_analyzed/(504*5e6)
)
# Generate correlations
summary_df <- df.fr %>% ungroup() %>% group_by(sample_id) %>%
dplyr::summarize(
ratio_cor=cor(ratio, healthy_median$median_ratio, method="pearson", use="complete.obs"),
ratio_corrected_cor=cor(ratio_corrected, healthy_median$median_ratio_corrected, method="pearson", use="complete.obs"),
ratio_centered_cor=cor(ratio_centered, healthy_median$median_ratio_centered, method="pearson", use="complete.obs"),
coverage_cor=cor(coverage, healthy_median$median_coverage, method="pearson", use="complete.obs"),
coverage_corrected_cor=cor(coverage_corrected, healthy_median$median_coverage_corrected, method="pearson", use="complete.obs"),
coverage_centered_cor=cor(coverage_centered, healthy_median$median_coverage_centered, method="pearson", use="complete.obs"),
combined_cor=cor(combined, healthy_median$median_combined, method="pearson", use="complete.obs"),
combined_centered_cor=cor(combined_centered, healthy_median$median_combined_centered, method="pearson", use="complete.obs"),
nfrags = sum(nfrags),
mode_size=unique(mode_size),
mean_size=unique(mean_size),
median_size=unique(median_size),
q25_size=unique(q25_size),
q75_size=unique(q75_size),
hqbases_analyzed = 100*sum(nfrags)*2,
coverage = hqbases_analyzed/(504*5e6)
)
View(summary_df)
#summary_df$`type` = relevel(as_factor(summary_df$`type`), "Healthy")
write.table(summary_df, file.path(outdir, paste0("summary_correlations.txt")), sep = "\t")
mytheme <- theme_classic(base_size=12) + theme(
axis.text.x = element_blank(),
axis.ticks.x=element_blank(),
strip.text.x = element_text(size=12),
strip.text.y = element_text(size=12),
axis.title.x = element_text(face="bold", size=17),
axis.title.y = element_text(size=15),
axis.text.y = element_text(size=15),
plot.title = element_text(size=15),
legend.position = "none",
legend.title = element_text(size=10),
legend.text = element_text(size=10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background=element_rect(fill="white", color="white"))
armlevels <- c("1p","1q","2p","2q","3p","3q","4p","4q","5p","5q","6p","6q",
"7p","7q","8p","8q", "9p", "9q","10p","10q","11p","11q","12p",
"12q","13q","14q","15q","16p","16q","17p","17q","18p","18q",
"19p", "19q","20p","20q","21q","22q")
df.fr$arm <- factor(df.fr$arm, levels=armlevels)
healthy_median$arm <- factor(healthy_median$arm, levels=armlevels)
arm <- df.fr %>% group_by(arm) %>%
dplyr::summarize(n=n()) %>%
mutate(arm = as.character(arm))
small.arms <- setNames(c("", "10q", "", "12q", "", "16q",
"", "17q", "", "18q",
"", "", "", "",
"", ""),
c("10p", "10q", "12p", "12q", "16p", "16q",
"17p", "17q", "18p", "18q",
"19p", "19q", "20p", "20q",
"21q", "22q"))
arm.labels <- setNames(arm$arm, arm$arm)
arm.labels[names(small.arms)] <- small.arms
# Generate Fragmentation and Coverage plots
g1 <- ggplot(df.fr, aes(x=bin, y=ratio_centered, group=sample_id, color="red")) +
geom_line(size=0.75, alpha=0.5)
#geom_line(data=subset(df.fr, opt_TF > 0.03), size=0.75, alpha=1)
g1 <- g1 + geom_line(data=healthy_median, size=0.75, alpha=0.5, color="black")
g1 <- g1 + labs(x="", y="Fragmentation profile\n", color="")
g1 <- g1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
g1 <- g1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
g1 <- g1 + mytheme
g1
View(healthy_median)
# Generate Fragmentation and Coverage plots
g1 <- ggplot(df.fr, aes(x=bin, y=ratio_centered, group=sample_id, color="red")) +
geom_line(size=0.75, alpha=0.5)
#geom_line(data=subset(df.fr, opt_TF > 0.03), size=0.75, alpha=1)
g1 <- g1 + geom_line(data=healthy_median, aes(x=bin, y=median_ratio_centered), size=0.75, alpha=0.5, color="black")
g1 <- g1 + labs(x="", y="Fragmentation profile\n", color="")
g1 <- g1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
g1 <- g1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
g1 <- g1 + mytheme
g1
View(summary_df)
# Generate Fragmentation and Coverage plots
g1 <- ggplot(df.fr, aes(x=bin, y=ratio_centered, group=sample_id, color="red")) +
#geom_line(size=0.75, alpha=0.5)
geom_line(data=subset(df.fr, sample_id="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
g1 <- g1 + geom_line(data=healthy_median, aes(x=bin, y=median_ratio_centered), size=0.75, alpha=0.5, color="black")
g1 <- g1 + labs(x="", y="Fragmentation profile\n", color="")
g1 <- g1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
g1 <- g1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
g1 <- g1 + mytheme
g1
# Generate Fragmentation and Coverage plots
g1 <- ggplot(df.fr, aes(x=bin, y=ratio_centered, group=sample_id, color="red")) +
#geom_line(size=0.75, alpha=0.5)
geom_line(data=subset(df.fr, sample_id=="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
g1 <- g1 + geom_line(data=healthy_median, aes(x=bin, y=median_ratio_centered), size=0.75, alpha=0.5, color="black")
g1 <- g1 + labs(x="", y="Fragmentation profile\n", color="")
g1 <- g1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
g1 <- g1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
g1 <- g1 + mytheme
g1
c1 <- ggplot(df.fr, aes(x=bin, y=coverage_centered_01, group=sample_id, color="red")) +
#geom_line(size=0.5, alpha=0.5)
geom_line(data=subset(df.fr, sample_id=="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
c1 <- c1 + geom_line(data=healthy_median, aes(x=bin, y=median_ratio_centered), size=0.75, alpha=0.5, color="black")
c1 <- c1 + labs(x="", y="Coverage profile\n", color="")
c1 <- c1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
c1 <- c1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
c1 <- c1 + mytheme
c1
b1 <- ggplot(df.fr, aes(x=bin, y=coverage_centered_01, group=sample_id, color="red")) +
#geom_line(size=0.5, alpha=0.5)
geom_line(data=subset(df.fr, sample_id=="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
b1 <- b1 + geom_line(data=healthy_median, aes(x=bin, y=median_ratio_centered), size=0.75, alpha=0.5, color="black")
b1 <- b1 + labs(x="", y="Coverage profile\n", color="")
b1 <- b1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
b1 <- b1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
b1 <- b1 + mytheme
b1
c1 <- ggplot(df.fr, aes(x=bin, y=coverage_centered, group=sample_id, color="red")) +
#geom_line(size=0.5, alpha=0.5)
geom_line(data=subset(df.fr, sample_id=="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
c1 <- c1 + geom_line(data=healthy_median, aes(x=bin, y=median_coverage_centered), size=0.75, alpha=0.5, color="black")
c1 <- c1 + labs(x="", y="Coverage profile\n", color="")
c1 <- c1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
c1 <- c1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
c1 <- c1 + mytheme
c1
b1 <- ggplot(df.fr, aes(x=bin, y=combined_centered, group=sample_id, color="red")) +
#geom_line(size=0.5, alpha=0.5)
geom_line(data=subset(df.fr, sample_id=="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
b1 <- b1 + geom_line(data=healthy_median, aes(x=bin, y=median_combined_centered), size=0.75, alpha=0.5, color="black")
b1 <- b1 + labs(x="", y="Coverage profile\n", color="")
b1 <- b1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
b1 <- b1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
b1 <- b1 + mytheme
b1
c1
g1
# Generate Fragmentation and Coverage plots
g1 <- ggplot(df.fr, aes(x=bin, y=ratio_centered, group=sample_id, color="red")) +
#geom_line(size=0.75, alpha=0.5)
geom_line(data=subset(df.fr, sample_id==c("TGL49_0170_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated",
"TGL49_0170_Cf_S_PE_386_WG.filter.deduped.realigned.recalibrated",
"TGL49_0172_Cf_S_PE_389_WG.filter.deduped.realigned.recalibrated",
"TGL49_0177_Cf_S_PE_404_WG.filter.deduped.realigned.recalibrated",
"TGL49_0181_Cf_S_PE_375_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1))
# Generate Fragmentation and Coverage plots
g1 <- ggplot(df.fr, aes(x=bin, y=ratio_centered, group=sample_id, color="red")) +
#geom_line(size=0.75, alpha=0.5)
geom_line(data=subset(df.fr, sample_id=c("TGL49_0170_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated",
"TGL49_0170_Cf_S_PE_386_WG.filter.deduped.realigned.recalibrated",
"TGL49_0172_Cf_S_PE_389_WG.filter.deduped.realigned.recalibrated",
"TGL49_0177_Cf_S_PE_404_WG.filter.deduped.realigned.recalibrated",
"TGL49_0181_Cf_S_PE_375_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1))
g1 <- g1 + geom_line(data=healthy_median, aes(x=bin, y=median_ratio_centered), size=0.75, alpha=0.5, color="black")
g1 <- g1 + labs(x="", y="Fragmentation profile\n", color="")
g1 <- g1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
g1 <- g1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
g1 <- g1 + mytheme
g1
keep <- c("TGL49_0170_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated",
"TGL49_0170_Cf_S_PE_386_WG.filter.deduped.realigned.recalibrated",
"TGL49_0172_Cf_S_PE_389_WG.filter.deduped.realigned.recalibrated",
"TGL49_0177_Cf_S_PE_404_WG.filter.deduped.realigned.recalibrated",
"TGL49_0181_Cf_S_PE_375_WG.filter.deduped.realigned.recalibrated")
df.fr_org <- df.fr[df.fr$sample_id %in% keep, ]
# Generate Fragmentation and Coverage plots
g1 <- ggplot(df.fr, aes(x=bin, y=ratio_centered, group=sample_id, color="red")) +
geom_line(size=0.75, alpha=0.5)
#geom_line(data=subset(df.fr, sample_id==c(), size=0.75, alpha=1))
g1 <- g1 + geom_line(data=healthy_median, aes(x=bin, y=median_ratio_centered), size=0.75, alpha=0.5, color="black")
g1 <- g1 + labs(x="", y="Fragmentation profile\n", color="")
g1 <- g1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
g1 <- g1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
g1 <- g1 + mytheme
g1
# Generate Fragmentation and Coverage plots
g1 <- ggplot(df.fr_org, aes(x=bin, y=ratio_centered, group=sample_id, color="red")) +
geom_line(size=0.75, alpha=0.5)
#geom_line(data=subset(df.fr, sample_id==c(), size=0.75, alpha=1))
g1 <- g1 + geom_line(data=healthy_median, aes(x=bin, y=median_ratio_centered), size=0.75, alpha=0.5, color="black")
g1 <- g1 + labs(x="", y="Fragmentation profile\n", color="")
g1 <- g1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
g1 <- g1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
g1 <- g1 + mytheme
g1
c1 <- ggplot(df.fr_org, aes(x=bin, y=coverage_centered, group=sample_id, color="red")) +
geom_line(size=0.5, alpha=0.5)
#geom_line(data=subset(df.fr, sample_id=="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
c1 <- c1 + geom_line(data=healthy_median, aes(x=bin, y=median_coverage_centered), size=0.75, alpha=0.5, color="black")
c1 <- c1 + labs(x="", y="Coverage profile\n", color="")
c1 <- c1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
c1 <- c1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
c1 <- c1 + mytheme
c1
b1 <- ggplot(df.fr_org, aes(x=bin, y=combined_centered, group=sample_id, color="red")) +
geom_line(size=0.5, alpha=0.5)
#geom_line(data=subset(df.fr, sample_id=="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
b1 <- b1 + geom_line(data=healthy_median, aes(x=bin, y=median_combined_centered), size=0.75, alpha=0.5, color="black")
b1 <- b1 + labs(x="", y="Coverage profile\n", color="")
b1 <- b1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
b1 <- b1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
b1 <- b1 + mytheme
b1
b1 <- ggplot(df.fr_org, aes(x=bin, y=combined_centered, group=sample_id, color="red")) +
geom_line(size=0.5, alpha=0.5)
#geom_line(data=subset(df.fr, sample_id=="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
b1 <- b1 + geom_line(data=healthy_median, aes(x=bin, y=median_combined_centered), size=0.75, alpha=0.5, color="black")
b1 <- b1 + labs(x="", y="Combined profile\n", color="")
b1 <- b1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
b1 <- b1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
b1 <- b1 + mytheme
b1
g1
c1
b1
c1 <- ggplot(df.fr_org, aes(x=bin, y=coverage_centered, group=sample_id, color="red")) +
geom_line(size=0.75, alpha=0.5)
#geom_line(data=subset(df.fr, sample_id=="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
c1 <- c1 + geom_line(data=healthy_median, aes(x=bin, y=median_coverage_centered), size=0.75, alpha=0.5, color="black")
c1 <- c1 + labs(x="", y="Coverage profile\n", color="")
c1 <- c1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
c1 <- c1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
c1 <- c1 + mytheme
c1
b1 <- ggplot(df.fr_org, aes(x=bin, y=combined_centered, group=sample_id, color="red")) +
geom_line(size=0.75, alpha=0.5)
b1 <- ggplot(df.fr_org, aes(x=bin, y=combined_centered, group=sample_id, color="red")) +
geom_line(size=0.75, alpha=0.5)
#geom_line(data=subset(df.fr, sample_id=="TGL49_0166_Cf_S_PE_420_WG.filter.deduped.realigned.recalibrated"), size=0.75, alpha=1)
b1 <- b1 + geom_line(data=healthy_median, aes(x=bin, y=median_combined_centered), size=0.75, alpha=0.5, color="black")
b1 <- b1 + labs(x="", y="Combined profile\n", color="")
b1 <- b1 + facet_grid(~arm, switch="x",space="free_x", scales="free_x", labeller=labeller(arm=arm.labels))
b1 <- b1 + coord_cartesian(xlim = NULL, ylim=c(-.10,.12), expand = TRUE)
b1 <- b1 + mytheme
b1
library(plotly)
library(RColorBrewer)
#set coverage (C), tumour fraction (TF), Targets (N), # of mutations to find (M)
C <- c(0.1, 0.5, 1, 2, 5, 10, 15, 20, 25, 30, 40, 50)
N <- c(2000)
M <- c(1)
#Set color palette
palette <- colorRampPalette(c("#DEEBF7", "#DEEBF7", "#DEEBF7", "#C6DBEF","#9ECAE1", "#2171B5"))
#Set function to calculate p and pm
pfun <- function(a,b,c,d) {(1-((1-a)^(b*c)))^d}
pmfun <- function(a,b,c) {(a*b*c*0.5)}
#Calculate p-value table
p <- outer(TF, C, N, M, FUN=pfun)
pm <- outer(TF, C, N, FUN=pmfun)
pm <- t(pm)
TF <- c(0.1, 0.01, 0.001, 0.0001, 0.00001)
#Set function to calculate p and pm
pfun <- function(a,b,c,d) {(1-((1-a)^(b*c)))^d}
pmfun <- function(a,b,c) {(a*b*c*0.5)}
#Calculate p-value table
p <- outer(TF, C, N, M, FUN=pfun)
pm <- outer(TF, C, N, FUN=pmfun)
pm <- t(pm)
#Create plot list
filteredList <- list(x = C,
y = TF,
z = p,
m = pm)
#Create plot
plot_ly(type = 'surface', contours = list(
x = list(show = TRUE, start = 10000, end = 0, size = 10, color = "black"),
y = list(show = TRUE, start = 0.1, end = 0, size = 0.0001, color = "black"),
z = list(show = TRUE, start = 0.95, end = 1, size = 0.05, color = "black")),
colors = palette(50),
x = filteredList$x,
y = filteredList$y,
z = filteredList$z,
text = filteredList$m,
hovertemplate = paste('<br><b>Tumour Fraction</b>: %{y}',
'<br><b>Coverage</b>: %{x}X',
'<br><b>probability</b>: %{z}',
'<br><b># mutant reads</b>: %{text}',
"<extra></extra>")) %>%
layout(title = "",
scene = list(
camera = list(eye = list(x = 1.25, y = 1.25, z = 0.75)),
xaxis = list(title = "Coverage",
autorange = "reversed",
type = "log",
nticks = 10,
tickvals = c(0.1, 1, 5, 20, 50, 200, 1000, 5000)),
yaxis = list(title = "Tumour Fraction",
autorange = "reversed",
type = "log",
nticks = 5,
tickvals = TF,
ticktext = c("10<sup>-2</sup>", "10<sup>-3</sup>", "10<sup>-4</sup>", "10<sup>-5</sup>", "10<sup>-6</sup>"),
showexponent = "all",
exponentformat = "E"),
zaxis = list(title = "Probability",
nticks = 5,
tickvals = c(0.25, 0.50, 0.75, 1.00)),
camera = list(eye = list(x = 0, y = -1, z = 1)),
aspectratio = list(x = 1, y = 1, z = 0.5)))
source('~/Google Drive/Post-Doc/Uveal Melanoma/Manuscript/Figures/Figure 4/Figure 4.R')
#plot Figure 4 - Clinical Integration
ggplot(data, aes(x = timepoint,
group = sample_ID)) +
geom_point(aes(y = ichorCNA,
fill = ichor_det,
alpha = ichor_det), size = 2.5, shape = 21) +
geom_point(aes(y = mutation,
fill = mut_det,
alpha = mut_det), size = 2.5, shape = 21) +
geom_point(aes(y = fragment,
fill = frag_det,
alpha = frag_det), size = 2.5, shape = 21) +
geom_point(aes(y = methylome,
fill = meth_det,
alpha = meth_det), size = 2.5, shape = 21) +
xlab("Months") +
ylab("") +
ggtitle("") +
labs(fill = "Analysis") +
scale_fill_manual(values = c("ichor" = "#377EB8", "mut" = "#FF7F00", "frag" = "#E41A1C", "meth" = "#4DAF4A", "no" = "lightgrey"),
labels = c("ichorCNA", "Mutation")) + #, "Fragmentation", "cfMeDIP", "Negative")) +
scale_alpha_manual(values = c("ichor" = 1, "mut" = 1, "frag" = 1, "meth" = 1, "no" = 0.1), guide = "none") +
facet_grid(rows = vars(sample_ID),
scales = "free",
space = "free") +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 0.5, size = 12, face = "bold"),
axis.text.y = element_text(hjust = 1, vjust = 0.5, size = 10),
strip.background = element_rect(color="white", fill="white"),
strip.text.y = element_text(size = 12, color = "black", face = "bold", angle = 0)) +
scale_y_continuous(limits=c(-0.04, 0.17), expand = c(0,0)) +
geom_vline(data = data_relapse, aes(xintercept = relapse), linetype = "dashed", color = "red") +
geom_vline(data = data_relapse, aes(xintercept = death, color = "death"), linetype = "solid") +
geom_vline(data = data_relapse, aes(xintercept = followup, color = "followup"), linetype = "solid") +
scale_color_manual(name = "Clinical",
values = c(death = "red", followup = "black"),
labels = c(death = "Relapse/Death", followup = "Lost to F/U"))
